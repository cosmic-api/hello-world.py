{"name":"Hello-world.py","tagline":"Example API using Cosmic","body":"### What is Cosmic?\r\n[Cosmic](http://www.cosmic-api.com) is a high-level framework for crafting web APIs.\r\nThis page gives you an overview of how to write a simple Cosmic API.\r\nInstructions on how to run this example can be found on [GitHub project](https://github.com/cosmic-api/hello-world.py).\r\n\r\n### Analyzing the API\r\n\r\n```python\r\nfrom cosmic.api import API\r\n\r\n# Define name of the API\r\napi = API('cosmic_hello_world', 'http://localhost:8080')\r\n```\r\n`API` class is used to create new instance of Cosmic API.\r\nFirst parameter is the name of the API, and it's required.\r\nSecond parameter is the URL of the API.(this is optional) (edit me later)\r\n\r\n```python\r\n# Set of people\r\npeople = set()\r\n```\r\n\r\nCreate an empty set to hold names.\r\n\r\n```python\r\n@api.action(\r\n  accepts={\"type\": \"string\"},\r\n  returns={\"type\": \"string\"}\r\n)\r\ndef remember_me(name):\r\n  \"\"\"Remember someone upto 10 people.\r\n  \"\"\"\r\n  if name not in people:\r\n    # Too many people to remember!\r\n    if len(people) >= 10:\r\n      people.pop()\r\n    # Add new person\r\n    people.add(name)\r\n    return \"Hello, %s! I'll remember you.\" % name\r\n  else:\r\n    return \"Welcome back, %s.\" % name\r\n```\r\nHere we are declaring that this function will take a single `string` parameter,\r\nand it'll return a `string` as well.\r\n\r\n\r\nNote that it takes in regular python `str`.\r\nCosmic takes care of type conversions automatically, using `accepts` schema defined above.\r\n\r\n\r\nWhat is happening under the hood is that HTTP request with JSON body data is parsed, validated, and normalized to python's native `str` type.\r\n\r\n\r\nThe return value also goes through same process as well, except in reversed order.\r\nReturned native `str` is serialized into JSON, based on `returns` schema.\r\n\r\n\r\n```python\r\n# List people\r\n@api.action(\r\n  returns={\r\n    \"type\": \"array\",\r\n    \"items\": {\"type\": \"string\"}\r\n  }\r\n)\r\ndef list_people():\r\n  \"\"\"List everyone I know.\r\n  \"\"\"\r\n  return list(people)\r\n```\r\n\r\nSecond action, which takes no argument, returns list of names in the set.\r\n\r\n\r\nInteresting part here is that the `returns` definition. In Cosmic, you can define complex models for the action's parameters or return values. All models are serialized/de-serialized automatically to/from JSON. \r\n\r\n\r\nMoreover, Cosmic does validations on all parameters and returns, so the function can always expect the parameters will be in correct type, as well as the returned values. If the function does not return correct type as defined in `returns` schema, it will raise exception. This is a wonderful feature since your API users can always expect to receive correct data type as defined in `returns` schema.\r\n\r\n\r\n```python\r\n# Start listening to HTTP requests\r\napi.run(port=8080, debug=True)\r\n```\r\n\r\nNow you can start the HTTP server to serve requests.\r\n\r\n\r\nBecause Cosmic is very modular, you'll be able to use other HTTP servers as oppose to currently default `flask` web server.\r\n\r\n\r\n***\r\n\r\nVisit [Cosmic](http://www.cosmic-api.com) if you want to lean more.","google":"UA-36006075-1","note":"Don't delete this file! It's used internally to help with page regeneration."}